<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YHZ &#39; s Blog</title>
  <subtitle>技术之路，在于热爱与积累</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-07T07:03:43.595Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Loya</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>browser-sync 调试神器-浏览器自动同步刷新</title>
    <link href="http://yoursite.com/2015/11/07/browser-sync/"/>
    <id>http://yoursite.com/2015/11/07/browser-sync/</id>
    <published>2015-11-07T03:19:27.000Z</published>
    <updated>2016-11-07T07:03:43.595Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://browsersync.io/" target="_blank" rel="external">Browser-sync官网</a></p>
<p>Browsersync能让多浏览器实时、快速响应文件更改（html、js、css、sass、less等）并自动刷新页面。</p>
<p>更强大的是， 它<strong>可以同时在PC、平板、手机等设备下进项调试</strong>。</p>
</blockquote>
<p>以前在开发项目时，每次改动文件都要在浏览器中手动刷新才能看到效果，想要在多个浏览器看到效果更是麻烦。<br>那能不能让系统自动检测文件的更改，当文件更改时自动刷新浏览器呢？能不能同时刷新多个浏览器呢？<br>（事实上， browser-sync 可以做的事远不止如此）</p>
<h2 id="1-必须有node环境"><a href="#1-必须有node环境" class="headerlink" title="1. 必须有node环境"></a>1. 必须有node环境</h2><p>BrowserSync是基于Node.js的, 是一个Node模块， 如果想要快速使用它，需要先安装一下Node.js<br>[安装适用于Mac OS，Windows和Linux][<a href="https://nodejs.org/download/" target="_blank" rel="external">https://nodejs.org/download/</a>]</p>
<h2 id="2-安装-BrowserSync"><a href="#2-安装-BrowserSync" class="headerlink" title="2. 安装 BrowserSync"></a>2. 安装 BrowserSync</h2><p>可以选择从 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> 的包管理（NPM）[库中][<a href="https://www.npmjs.com/package/browser-sync" target="_blank" rel="external">https://www.npmjs.com/package/browser-sync</a>] 安装BrowserSync。<br>注意 browser-sync 是一个全局 package，因此使用 -g 参数（或者 –global ）</p>
<p>打开任意一个终端窗口,告诉包管理器下载 BrowserSync 文件，并在全局下安装，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g browser-sync</div></pre></td></tr></table></figure>
<p>若是与 <a href="http://gulpjs.com/" target="_blank" rel="external">gulp</a> 或 <a href="http://gruntjs.com/" target="_blank" rel="external">grunt</a> 构建工具来使用，在需要构建的项目里运行下面的命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev browser-sync</div></pre></td></tr></table></figure>
<ul>
<li>查看 npm 模块全局安装的根目录 可以使用<strong> $ npm root -g </strong>命令来查看。</li>
</ul>
<h2 id="3-启动-BrowserSync"><a href="#3-启动-BrowserSync" class="headerlink" title="3. 启动 BrowserSync"></a>3. 启动 BrowserSync</h2><p>安装完成之后，就可以启动服务了。<br>将目录切换到项目目录，执行相应的命令。</p>
<h3 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h3><p>如果要监听自己项目中的文件, 就需要使用服务器模式。<br> BrowserSync 会启动一个小型服务器，并提供一个 URL 用来查看自己的网站。</p>
<p> 这里假设监听 .html 、 .css 及 .js 等多个类型的文件，要想只监听一种类型的文件，做小小改动就好</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// --files 路径是相对于运行该命令的项目（目录） </div><div class="line">// start --server，就表示启动了一个小型服务器</div><div class="line">$ browser-sync start --server --files <span class="string">"*.html, css/*.css, js/*.js"</span></div><div class="line"></div><div class="line">// 如果你的文件层级比较深，您可以考虑使用 **（表示任意目录）匹配，任意目录下任意.css 或 .html文件。 </div><div class="line">$ browser-sync start --server --files <span class="string">"**/*.css, **/*.html"</span></div></pre></td></tr></table></figure>
<p>执行完这行命令后，会自动打开系统默认浏览器，地址为 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> ，<br>也就是说：browser-sync 开启了一个端口为 3000 的服务器。</p>
<p>此时，用其他的浏览器中也打开 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 这个页面，就能够访问到同样的内容了。<br>同时，只要文件发生更改，所有的浏览器都会自动刷新。</p>
<p><img src="../img/sync-demo.gif" alt="sync-demo"></p>
<h4 id="可视化界面（GUI）控制面板"><a href="#可视化界面（GUI）控制面板" class="headerlink" title="可视化界面（GUI）控制面板"></a>可视化界面（GUI）控制面板</h4><p>通过 GUI 来控制，在一个浏览器中滚动页面、表单输入和点击事件等行为也会同步到其他浏览器和设备中。</p>
<p>该面板默认地址为 <a href="http://localhost:3001" target="_blank" rel="external">http://localhost:3001</a> 进入该控制面板可以进行更多设置，同时也可以看到 browser-sync 的更多可用功能。</p>
<p><img src="../img/GUIControl.png" alt="GUIControl"></p>
<p><strong>滚动窗口的演示</strong></p>
<p><img src="../img/scroll-demo.gif" alt="scroll-demo"></p>
<h3 id="动态网站"><a href="#动态网站" class="headerlink" title="动态网站"></a>动态网站</h3><p>如果已经有其他本地服务器环境 PHP 或类似的，需要使用 <em>代理模式</em> 。<br> BrowserSync 将通过代理 URL(localhost:3000) 来查看您的网站。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 主机名可以是ip或域名</div><div class="line">$ browser-sync start --proxy <span class="string">"主机名"</span> <span class="string">"css/*.css"</span></div></pre></td></tr></table></figure>
<p>在本地创建了一个 PHP 服务器环境，并通过绑定 Browsersync.cn 来访问本地服务器，<br>使用以下命令方式， Browsersync 将提供一个新的地址 localhost:3000 来访问 Browsersync.cn ，<br>并监听其 css 目录下的所有 css 文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ browser-sync start --proxy <span class="string">"Browsersync.cn"</span> <span class="string">"css/*.css"</span></div></pre></td></tr></table></figure>
<h2 id="4-结合构建工具使用-gulp"><a href="#4-结合构建工具使用-gulp" class="headerlink" title="4. 结合构建工具使用(gulp)"></a>4. 结合构建工具使用(gulp)</h2><blockquote>
<p>在安装的步骤中给出了与 gulp 或 grunt 构建工具使用要执行的命令</p>
</blockquote>
<p><strong>此处说说 如何加入 gulp 中使用 </strong></p>
<p> <a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a>  是现在流行的自动化工具，<br>但 BrowserSync 并没有 Gulp 插件版，因为并不需要。<br> BrowserSync 有自己独立的 API ，将它注册为 gulp 的一个 task 即可。</p>
<p>下面是一段gulpfile.js的示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    browserSync(&#123;</div><div class="line">        <span class="attr">files</span>: <span class="string">"**"</span>,</div><div class="line">        <span class="attr">server</span>: &#123;</div><div class="line">            <span class="attr">baseDir</span>: <span class="string">"./"</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">"browser-sync"</span>]);</div></pre></td></tr></table></figure>
<p>这时运行gulp将等同于前文中的browser-sync start –server –files “**”。</p>
<p><strong>关于结合 gulp 或 grunt 来使用，详细了解 <a href="http://www.browsersync.cn/docs/gulp/" target="_blank" rel="external">Gulp文档</a>、<br> <a href="http://www.browsersync.cn/docs/grunt/" target="_blank" rel="external">Grunt文档</a> </strong></p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li><a href="http://www.browsersync.cn/" target="_blank" rel="external">http://www.browsersync.cn/</a></li>
<li><a href="http://www.mamicode.com/info-detail-669066.html" target="_blank" rel="external">http://www.mamicode.com/info-detail-669066.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://browsersync.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browser-sync官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Browsersync能让多浏览器实时、快速响应文件更改（html
    
    </summary>
    
    
      <category term="browser-sync" scheme="http://yoursite.com/tags/browser-sync/"/>
    
  </entry>
  
  <entry>
    <title>Node.js自学（一）</title>
    <link href="http://yoursite.com/2015/09/10/nodeJS-1/"/>
    <id>http://yoursite.com/2015/09/10/nodeJS-1/</id>
    <published>2015-09-10T02:04:52.000Z</published>
    <updated>2016-11-04T12:16:11.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>node 让前端可以有机会踏入后端开发领域，使用 JavaScript 语言进行服务器编程</p>
<p>划时代意义的 Node ，开启了前端工程师的 <strong>全栈开发</strong> 之旅</p>
</blockquote>
<h2 id="Node-介绍"><a href="#Node-介绍" class="headerlink" title="Node 介绍"></a>Node 介绍</h2><h3 id="什么是-Node"><a href="#什么是-Node" class="headerlink" title="什么是 Node"></a>什么是 Node</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node官方网站</a></p>
<p><img src="/img/node-logo.png" alt="node-logo"></p>
<p>进入到官网可看到这么一段话：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Node.js® is a JavaScript runtime built on Chrome<span class="string">'s V8 JavaScript engine.</span></div><div class="line">Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.</div><div class="line">Node.js' package ecosystem, npm, is the largest ecosystem of open <span class="built_in">source</span> libraries <span class="keyword">in</span> the world.</div></pre></td></tr></table></figure>
<ul>
<li><p>第一句话的含义：</p>
<ul>
<li>NodeJS 是一个构建与 Chrome V8 JavaScript 解析引擎之上的一个运行时环境</li>
<li>其中的 Chrome V8 引擎是开源的，在所有浏览器的 JavaScript 解析引擎中是最快的</li>
<li><a href="https://zh.wikipedia.org/wiki/JavaScript%E5%BC%95%E6%93%8E" target="_blank" rel="external">维基百科 - JavaScript引擎</a></li>
</ul>
</li>
<li><p>第二句话的含义：</p>
<ul>
<li>event-driven：事件驱动</li>
<li>non-blocking I/O model：非阻塞IO模型</li>
<li>lightweight and efficient：轻量和高效</li>
<li>Node 本身提供了一些系统级别操作API</li>
</ul>
</li>
<li><p>第三句话的含义：</p>
<ul>
<li>package ecosystem, npm：包管理系统 npm</li>
<li>largest ecosystem of open source libraries in the world.<ul>
<li>目前世界上最大的开源库生态系统</li>
<li>50W + 就好比 Sublime编辑器一样，本身只提供很简单的功能</li>
<li>大部分都需要依靠社区中的插件、包来开发咱们的应用程序</li>
<li>npm 两层含义：<ul>
<li>第一 是用来托管基于Node开发的包</li>
<li>第二 是一个命令行工具，可以用来下载npm网站上托管的Node包</li>
<li>有了 npm，就会成为完全傻瓜式的开发</li>
<li>直接拿来解决你的问题就可以了，能让你更加专注于业务的处理</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Node 能解析和执行 JavaScript（ECMAScript） 代码</p>
</li>
<li>Node 是一个平台，</li>
<li><p>Node </p>
<ul>
<li>例如文件操作</li>
<li>网络操作</li>
</ul>
</li>
<li><p>免费开源</p>
</li>
<li><p>通俗地讲，Node 不是库、框架，也不是一门新的语言，而是一个解析器，可以用来解析和执行 JavaScript 代码。本身是免费开源的</p>
<ul>
<li>这里所谓的 JavaScript 是 ECMAScript（指循环、分支控制语句等if、else、for、var、function、Array、Object）</li>
<li>Node 是一个平台，或者说是一个执行环境，自身通过 C、C++ 语言实现的，<br>然后给上层 JavaScript 暴露接口访问 API，让 JavaScript 可以脱离浏览器环境运行</li>
<li>例如：文件操作、网络操作等，使用 Node 可以轻松的进行文件系统访问、HTTP 服务器开发等功能</li>
<li>具体的环境 API 是通过 C、C++ 代码实现的，</li>
</ul>
</li>
</ul>
<h3 id="客户端和服务器"><a href="#客户端和服务器" class="headerlink" title="客户端和服务器"></a>客户端和服务器</h3><p>任何后台编程平台，只要是 Web 服务器，都做这三步操作来处理数据</p>
<ul>
<li>接收请求</li>
<li>处理请求</li>
<li>发送响应</li>
</ul>
<p><img src="/img/client-server.png" alt="client-server"></p>
<h3 id="为什么要学习Node"><a href="#为什么要学习Node" class="headerlink" title="为什么要学习Node"></a>为什么要学习Node</h3><ul>
<li>Node 打破了过去 JavaScript 只能在浏览器中运行的局面</li>
<li>好处：<ul>
<li>前后端编程环境统一，大大降低了前后端语言切换的代价</li>
<li>不好的地方在于，没有后台编程经验，特别容易分不清前后台代码，因为都是 js</li>
</ul>
</li>
</ul>
<h3 id="使用-Node-可以做什么"><a href="#使用-Node-可以做什么" class="headerlink" title="使用 Node 可以做什么"></a>使用 Node 可以做什么</h3><ul>
<li>高性能的网站服务器</li>
<li>实时多人游戏后台服务器</li>
<li>简单易用的命名行应用程序<ul>
<li>gulp、less、bower、fis、http-server、npm</li>
<li>ant、ruby、.net nuget</li>
</ul>
</li>
<li>高大上的桌面应用程序<ul>
<li>使用 Web 技术 作为解决方案<ul>
<li>HTML、CSS、JavaScript</li>
<li>本质上就是将这些东西打包到一个浏览器中</li>
</ul>
</li>
<li>electron Linus + Mac + Windows</li>
</ul>
</li>
<li>底层的物联网开发<ul>
<li>树莓派</li>
</ul>
</li>
<li>移动开发<ul>
<li>基于 HTML、CSS、JavaScript、Node</li>
<li>Ionic 安卓 IOS</li>
<li>使用 Web 技术作为解决方案</li>
</ul>
</li>
</ul>
<h3 id="Node-的特点"><a href="#Node-的特点" class="headerlink" title="Node 的特点"></a>Node 的特点</h3><ul>
<li>Single Thread：单线程</li>
<li>event-driven：事件驱动</li>
<li>non-blocking I/O model：非阻塞IO模型<ul>
<li>同步阻塞型 IO，造成后续代码等待</li>
<li>异步非阻塞，相当于找了一个人帮你去干活儿，自己继续忙活自己的事情，即callback<ul>
<li>一般通常的异步调用API往往伴随着一个回调函数来接收返回值</li>
<li>文件IO、网络IO 基本上都是异步的</li>
</ul>
</li>
</ul>
</li>
<li>lightweight and efficient: 轻量和高效（因为 Node 采用的是 事件驱动和非阻塞IO模型）</li>
<li>开源免费、跨平台</li>
</ul>
<h3 id="Node-的诞生历程"><a href="#Node-的诞生历程" class="headerlink" title="Node 的诞生历程"></a>Node 的诞生历程</h3><p><img src="/img/maxresdefault.jpg" width="500" alt=""></p>
<p><img src="/img/ryan_dahl.jpg" alt=""></p>
<ul>
<li>Node 的作者：<code>Ryan Dahl</code></li>
<li>2004年还在纽约读数学系博士</li>
<li>2006年退学（世界那么大，我想去看看），生活所迫，选择了码农</li>
<li>接项目、工作、旅行，两年之后，成为了高性能Web服务器的专家</li>
<li>2009年5月，Ryan Dahl 在 github 上发布了最初的 Node 版本</li>
<li>最初的Node，名字叫：<code>web.js</code>，作者是希望把它做成一个类似于 Apache 一样的产品</li>
<li>2010年底，Ryan Dahl 加入 Joyent 公司全职负责 Node 的发展</li>
<li>2011年7月，Node 在微软的支持下发布了 Windows 版</li>
<li>2012年1月底，Ryan Dahl 将掌门人身份转交给了 Isaac Z.Schlueter，自己转向一些研究项目</li>
<li>2014年12月，多为重量级Node开发者不满 Joyent 对 Node 的管理，自立门户创建了 <code>io.js</code></li>
<li>2015年9月，Node 与 io.js 合并，Node 的版本从 0.12.7 直接升级到了 4.0.0</li>
<li>合并后的 io.js 和 Node 在 Joyent 公司的维护下并行了两个版本：<ul>
<li>一个是4.x.x  还是原来的 Node，这个版本是稳定版</li>
<li>一个是5.x.x，目前已经更新到了 7.0.0，其实就是 io.js，最新特性版，不建议生产环境使用</li>
</ul>
</li>
<li>Node 在 2016 年 10月底正式发布 Node 7.0<ul>
<li>7.0 已经最大限度的支持了很多的 ES6 新语法</li>
<li>而且提高了整体的执行性能，提供了一些新功能 API</li>
</ul>
</li>
</ul>
<h3 id="Node-学习资源推荐"><a href="#Node-学习资源推荐" class="headerlink" title="Node 学习资源推荐"></a>Node 学习资源推荐</h3><ul>
<li><a href="https://nodejs.org/dist/latest-v7.x/docs/api/" target="_blank" rel="external">官方文档</a></li>
<li>深入浅出Node.js</li>
<li>Node.js实战（第一季）<ul>
<li>实例</li>
</ul>
</li>
<li>Node.js实战（第二季）<ul>
<li>实例</li>
</ul>
</li>
<li>Node与Express开发</li>
<li><a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="external">菜鸟教程 - Node.js</a></li>
<li><a href="https://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://cnodejs.org/" target="_blank" rel="external">Node中文社区</a></li>
<li><a href="http://nodeapi.ucdok.com/#/api/" target="_blank" rel="external">Node V4.2.1中文文档</a></li>
<li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external">Node.js 包教不包会</a></li>
</ul>
<hr>
<h2 id="安装与配置-Node-开发环境"><a href="#安装与配置-Node-开发环境" class="headerlink" title="安装与配置 Node 开发环境"></a>安装与配置 Node 开发环境</h2><h3 id="普通方式安装"><a href="#普通方式安装" class="headerlink" title="普通方式安装"></a>普通方式安装</h3><ul>
<li>下载地址：<code>https://nodejs.org/en/download/</code></li>
<li>下一步下一步即可</li>
</ul>
<h3 id="使用-nvm-安装和管理多个-node-环境版本"><a href="#使用-nvm-安装和管理多个-node-环境版本" class="headerlink" title="使用 nvm 安装和管理多个 node 环境版本"></a>使用 <code>nvm</code> 安装和管理多个 node 环境版本</h3><ul>
<li>nvm node version management</li>
<li>nvm 是一个命令行程序，可以非常方便的安装和管理多个 Node 版本</li>
<li>使用该命令，即可在多个node版本之间切换</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm use x.x.x</div></pre></td></tr></table></figure>
<ul>
<li>下载地址：<code>https://github.com/coreybutler/nvm-windows</code></li>
</ul>
<h3 id="如何验证是否有Node环境"><a href="#如何验证是否有Node环境" class="headerlink" title="如何验证是否有Node环境"></a>如何验证是否有Node环境</h3><p>打开终端，输入 <code>node -v</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node -v</div></pre></td></tr></table></figure>
<p>如果能看到输出一个版本号，例如 <code>v6.9.1</code> 的文本，说明当前计算机有 Node环境。</p>
<hr>
<h2 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>使用 <code>node</code> 命令执行一个 <code>JavaScript</code> 脚本文件：</p>
<ol>
<li>打开任意终端</li>
<li>使用 <code>cd</code> 命令切换到要执行的 js 脚本文件所属的目录</li>
<li>使用 <code>node 文件名</code> 去执行对应的 js 脚本文件</li>
<li>node 会解析和执行该文件中的代码，然后将执行结果输出到终端</li>
</ol>
<p>当你在终端中输入 <code>node example.js</code>，<br>实际上就是使用安装目录中的 node.exe 可执行程序，<br>node.exe 程序会自动读取该文件中的内容，<br>读取到该文件内容之后，node 环境开始解析和执行，<br>如果有 console.log 这样的代码，node 会将该输出打印到控制台中。</p>
<ul>
<li><p>注意1：文件名不要使用 <code>node</code> 命名</p>
</li>
<li><p>注意2：文件名和路径最好不要使用中文，路径中也最好不要有空格</p>
<ul>
<li>用户名、目录名不要有中文，不要有空格，不要有特殊的字符</li>
</ul>
</li>
<li><p>注意3：脚本文件编码都使用 utf8</p>
</li>
</ul>
<h3 id="文件IO：读写文件"><a href="#文件IO：读写文件" class="headerlink" title="文件IO：读写文件"></a>文件IO：读写文件</h3><ul>
<li><p>文件操作，需要加载 fs 核心模块（Node 提供的模块）</p>
<ul>
<li>读文件 readFile </li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载 fs 核心模块</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="comment">// 读文件</span></div><div class="line"><span class="comment">// 文件操作，要么是相对路径，要么是绝对路径，两种方式都必须是以 . 开头的</span></div><div class="line">fs.readFile(<span class="string">'./README.md'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// 默认读取到的数据都是二进制数据，</span></div><div class="line">  <span class="comment">// 可以使用 toString 方法将二进制数据转为可以识别的字符</span></div><div class="line">  <span class="comment">// console.log(data.toString())</span></div><div class="line"></div><div class="line">  <span class="comment">// 或者也可以在 readFile 的第二个可选参数中，指定一个编码</span></div><div class="line">  </div><div class="line">  <span class="comment">// 如果读取文件成功，err 就是 null</span></div><div class="line">  <span class="comment">// 如果读取文件失败，err 就是一个错误对象</span></div><div class="line">  <span class="comment">// console.log(err)</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="comment">// 自定义错误信息</span></div><div class="line">    <span class="comment">// return console.log('读取文件失败了')</span></div><div class="line"></div><div class="line">    <span class="comment">// 开发阶段多使用 throw，可以方便快速排查错误</span></div><div class="line">    <span class="keyword">throw</span> err</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(data)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>写文件 writeFile </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 第一个参数指定一个文件路径</span></div><div class="line"><span class="comment">//    如果该路径不存在，则新建</span></div><div class="line"><span class="comment">//    如果已存在，则覆盖</span></div><div class="line"><span class="comment">// 第二个参数指定要写入文件的内容，默认编码就是 utf8</span></div><div class="line">fs.writeFile(<span class="string">'./data.txt'</span>, <span class="string">'这里指定要写入文件的内容'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">throw</span> err</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'wirte file success'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="网络IO：HTTP服务器"><a href="#网络IO：HTTP服务器" class="headerlink" title="网络IO：HTTP服务器"></a>网络IO：HTTP服务器</h3><ul>
<li><p>开启http服务器的步骤</p>
<ul>
<li><ol>
<li>创建一个 HTTP 服务器，得到一个 Server 实例对象</li>
</ol>
</li>
<li><ol>
<li>监听 Server 对象的 request 请求事件，设置相应的事件回调处理函数</li>
</ol>
</li>
<li><ol>
<li>调用 Server 对象的 listen 方法，绑定一个端口号，开启服务器</li>
</ol>
</li>
</ul>
</li>
<li><p>举个栗子</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加载用来构建 HTTP 服务器的核心模块</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="comment">// 1. 创建一个 HTTP 服务器，得到一个 Server 实例对象</span></div><div class="line"><span class="keyword">var</span> server = http.createServer()</div><div class="line"></div><div class="line"><span class="comment">// 2. 监听 Server 对象的 request 请求事件，设置相应的事件回调处理函数</span></div><div class="line"><span class="comment">// 请求处理函数需要接收两个参数，分别是 Request 请求对象 和 Response 响应对象</span></div><div class="line"><span class="comment">// Request 请求对象：可以用来获取当前请求的一些信息，例如请求路径、请求方法、请求报文数据等</span></div><div class="line"><span class="comment">// Response 响应对象：可以用来给当前请求发送响应</span></div><div class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">  <span class="comment">// write 方法可以多次写入响应数据</span></div><div class="line">  response.write(<span class="string">'hello world'</span>)</div><div class="line"></div><div class="line">  <span class="comment">// 写入响应数据之后，一定要记得 结束响应</span></div><div class="line">  <span class="comment">// 否则，客户端会认为你的数据没有发送完毕，还要等待接收</span></div><div class="line">  <span class="comment">// 可以使用 response.end 方法手动结束响应，本次请求响应结束</span></div><div class="line">  response.end()</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 3. 调用 Server 对象的 listen 方法，绑定一个端口号，开启服务器</span></div><div class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running at port 3000.'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><p>在本地浏览器 输入 <a href="http://127.0.0.1:3000/" target="_blank" rel="external">http://127.0.0.1:3000/</a> 即可访问</p>
</li>
<li><p>解决中文乱码的问题</p>
<ul>
<li>在第二步的回调函数中,通过在响应头中加入 Content-Type 字段来告诉客户端本次响应的数据类型和编码类型</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// response.writeHead 需要接收三个参数</span></div><div class="line"><span class="comment">// 1. 响应状态码</span></div><div class="line"><span class="comment">// 2. 响应状态短语，可选参数</span></div><div class="line"><span class="comment">// 3. 响应头字段，是一个对象，键值对的形式表示</span></div><div class="line">response.writeHead(<span class="number">200</span>, &#123;</div><div class="line">  <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>通过请求对象拿到当前请求的一些数据（地址栏 url ）<ul>
<li>解析 url 中的字符串内容，根据请求内容决定返回的数据</li>
</ul>
</li>
</ul>
<p>例子：</p>
<ul>
<li>先创建一个文件夹，例如 http  </li>
<li>新建三个 html 文件, index.html login.html about.html 模拟返回的数据</li>
<li><p>新建 app.js 用做 http 请求</p>
<p>这里只写index.html 文件，其他两个文件与之类似，可写不同的内容，相互区分</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> server = http.createServer()</div><div class="line"></div><div class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">  <span class="comment">// 可以通过请求对象拿到当前请求的一些数据，例如请求路径、方法等信息</span></div><div class="line">  <span class="keyword">var</span> url = request.url</div><div class="line">  <span class="comment">//默认取到的是 / </span></div><div class="line">  <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</div><div class="line">    <span class="comment">//这里无论是什么文件，也不管后缀名，读到的文件内容都是字符串，因此返回到页面上的都是解析出来的字符串内容</span></div><div class="line">    <span class="comment">//比如把index.html文件改为 index 不加后缀名或改为a.txt</span></div><div class="line">    <span class="comment">//返回到页面中的都是 index page</span></div><div class="line">    fs.readFile(<span class="string">'./index.html'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">throw</span> err</div><div class="line">      &#125;</div><div class="line">      response.end(data)</div><div class="line">    &#125;)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/login'</span>) &#123;</div><div class="line">    fs.readFile(<span class="string">'./login.html'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">throw</span> err</div><div class="line">      &#125;</div><div class="line">      response.end(data)</div><div class="line">    &#125;)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/about'</span>) &#123;</div><div class="line">    fs.readFile(<span class="string">'./about.html'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">throw</span> err</div><div class="line">      &#125;</div><div class="line">      response.end(data)</div><div class="line">    &#125;)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    response.end(<span class="string">'&lt;h1&gt;404 Not Found.&lt;/h1&gt;'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(<span class="number">9090</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running at port 3000...'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>地址栏什么都不输入时，页面输出 index page</li>
<li>地址栏输入 /login ,页面输出 login page (自己定义的内容)</li>
<li>若输入其他的 如： aasa ,页面返回 404 Not Found.</li>
</ul>
<hr>
<h2 id="Path-环境变量"><a href="#Path-环境变量" class="headerlink" title="Path 环境变量"></a>Path 环境变量</h2><p>当在终端中要求系统运行一个程序而没有告诉它程序所在的完整路径时，<br>系统首先在当前目录下面寻找该程序，<br>如果找不到，则系统会跑到path环境变量中指定的路径去找，如果找到，直接运行，<br>如果path环境变量中也没有找到，则直接提示不是内部或外部命令，也不是可运行的程序。</p>
<p>添加 path 环境变量的两种方式：</p>
<p>一：直接在path环境变量中加入程序所属目录的绝对路径，<br>    两边以 <strong>英文分号</strong> 进行分隔。</p>
<p>例如 <code>XX.exe</code> 程序的绝对路径是 <code>C:\Program Files\XX</code>，<br>则在 <code>path</code> 中添加 <code>;C:\Program Files\XX;</code></p>
<p>二：也可以在外部先定义一个变量名，值就是程序所属目录的绝对路径，<br>    然后在 path 中以 <code>%变量名%</code> 的方式引入，两边以分号分隔</p>
<p>例如 <code>qq.exe</code> 程序的绝对路径是 <code>C:\Program Files (x86)\Tencent\QQ\Bin</code>，<br>则先定义一个变量名 <code>QQ_HOME</code> ，变量值就是 <code>C:\Program Files (x86)\Tencent\QQ\Bin</code>，<br>然后在 <code>path</code> 中填入变量名：<code>;%QQ_HOME%;</code></p>
<p>npm<br>hexo<br>browser-sync</p>
<p>当你使用 npm 安装一些第三方命令行工具的时候（凡是通过npm安装的第三方工具都是基于Node平台开发的）<br>，实际上就是把这个第三方工具包下载到了 全局包安装目录中了（可以通过 <code>npm root -g</code> 进行查看）。</p>
<p>它会自动在全局包安装目录的上一级目录生成一个 cmd 文件，这是Windows平台可以识别的<br>DOS 脚本文件。</p>
<hr>
<h2 id="Node-基础"><a href="#Node-基础" class="headerlink" title="Node 基础"></a>Node 基础</h2><h3 id="Node-中的-JavaScript"><a href="#Node-中的-JavaScript" class="headerlink" title="Node 中的 JavaScript"></a>Node 中的 JavaScript</h3><ul>
<li><p>REPL运行环境</p>
<ul>
<li>R：read</li>
<li>E：Eval</li>
<li>P：Print</li>
<li>L：Loop</li>
</ul>
</li>
<li><p>ECMAScript  </p>
<ul>
<li>Node 对最新的 ECMAScript 语言标准支持的非常好</li>
<li>对最新的 ES6 支持了将近 96% 的语法</li>
<li>Node 除了官方的 ECMAScript 语言规范</li>
<li>同时将 console 对象、定时器等函数也移植到 Node 中</li>
</ul>
</li>
<li><p>全局对象</p>
<ul>
<li>global<ul>
<li>相对于浏览器中的的全局对象 window</li>
<li>全局作用域和模块作用域的概念</li>
</ul>
</li>
<li>Console<ul>
<li>log</li>
<li>info</li>
<li>warn</li>
<li>error</li>
</ul>
</li>
<li>process<ul>
<li>进程对象</li>
</ul>
</li>
<li>Buffer</li>
</ul>
</li>
<li><p>全局函数</p>
<ul>
<li>setInterval 和 clearInterval</li>
<li>setTimeout 和 clearTimeout</li>
<li>setImmediate 和 clearImmediate</li>
</ul>
</li>
<li><p>模块内成员</p>
<ul>
<li><strong>dirname 和 </strong>filename</li>
<li>require</li>
<li>exports</li>
<li>module</li>
</ul>
</li>
</ul>
<h3 id="Node-中的模块系统"><a href="#Node-中的模块系统" class="headerlink" title="Node 中的模块系统"></a>Node 中的模块系统</h3><ul>
<li>Node 根据 <code>CommonJS</code> 规范实现了自己的一套模块系统</li>
<li>一个单独的文件就是一个模块<ul>
<li>如何定义模块：</li>
<li>Node 天生就已经实现了一个模块系统解决方案</li>
<li>默认在Node中运行的 JavaScript 脚本文件，就是一个模块，而且是私有作用域</li>
</ul>
</li>
<li>每一个模块都是一个单独的作用域<ul>
<li>没有浏览器中 window 全局作用域的概念了</li>
</ul>
</li>
<li>每个文件对外接口是 <code>module.exports</code> 对象</li>
<li><code>require</code> 方法用于加载模块<ul>
<li>执行被加载模块中的 JavaScript 代码</li>
<li>得到模块的 <code>module.exports</code> 接口对象</li>
</ul>
</li>
<li>核心模块和文件模块</li>
</ul>
<p>以下是常用的核心模块：</p>
<table>
<thead>
<tr>
<th>模块名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>fs</td>
<td>文件操作</td>
</tr>
<tr>
<td>http</td>
<td>http服务</td>
</tr>
<tr>
<td>net</td>
<td>Socket网络编程</td>
</tr>
<tr>
<td>os</td>
<td>操作系统相关</td>
</tr>
<tr>
<td>path</td>
<td>路径操作</td>
</tr>
<tr>
<td>querystring</td>
<td>处理查询字符串</td>
</tr>
<tr>
<td>url</td>
<td>处理url路径</td>
</tr>
<tr>
<td>util</td>
<td>工具函数</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;node 让前端可以有机会踏入后端开发领域，使用 JavaScript 语言进行服务器编程&lt;/p&gt;
&lt;p&gt;划时代意义的 Node ，开启了前端工程师的 &lt;strong&gt;全栈开发&lt;/strong&gt; 之旅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 i
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式验证大全</title>
    <link href="http://yoursite.com/2015/05/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/15/正则表达式/</id>
    <published>2015-05-15T09:08:52.000Z</published>
    <updated>2016-11-07T07:03:39.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></div><div class="line">function test() </div><div class="line">&#123; </div><div class="line">if(document.a.b.value.length&gt;50) </div><div class="line">&#123; </div><div class="line">alert("不能超过50个字符！"); </div><div class="line">document.a.b.focus(); </div><div class="line">return false; </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">a</span> <span class="attr">onsubmit</span>=<span class="string">"return test()"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"b"</span> <span class="attr">cols</span>=<span class="string">"40"</span> <span class="attr">wrap</span>=<span class="string">"VIRTUAL"</span> <span class="attr">rows</span>=<span class="string">"6"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"Submit"</span> <span class="attr">value</span>=<span class="string">"check"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="只能是汉字"><a href="#只能是汉字" class="headerlink" title="只能是汉字"></a>只能是汉字</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value="</span>/<span class="attr">oblog</span>/<span class="attr">value.replace</span>(/[^\<span class="attr">u4E00-</span>\<span class="attr">u9FA5</span>]/<span class="attr">g</span>,'')"&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;长度限制&quot;&gt;&lt;a href=&quot;#长度限制&quot; class=&quot;headerlink&quot; title=&quot;长度限制&quot;&gt;&lt;/a&gt;长度限制&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3学习总结</title>
    <link href="http://yoursite.com/2014/09/01/CSS3%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2014/09/01/CSS3学习总结/</id>
    <published>2014-09-01T12:04:52.000Z</published>
    <updated>2016-11-01T12:59:26.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3简介"><a href="#CSS3简介" class="headerlink" title="CSS3简介"></a>CSS3简介</h2><h3 id="CSS3的现状"><a href="#CSS3的现状" class="headerlink" title="CSS3的现状"></a>CSS3的现状</h3><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS3简介&quot;&gt;&lt;a href=&quot;#CSS3简介&quot; class=&quot;headerlink&quot; title=&quot;CSS3简介&quot;&gt;&lt;/a&gt;CSS3简介&lt;/h2&gt;&lt;h3 id=&quot;CSS3的现状&quot;&gt;&lt;a href=&quot;#CSS3的现状&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2014/03/06/hello-world/"/>
    <id>http://yoursite.com/2014/03/06/hello-world/</id>
    <published>2014-03-06T00:08:16.000Z</published>
    <updated>2016-11-04T12:13:04.232Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post.<br>Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info.<br>If you get any problems when using Hexo,<br>you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a><br>or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.&lt;br&gt;Check &lt;a href=&quot;https://he
    
    </summary>
    
    
  </entry>
  
</feed>
