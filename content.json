{"meta":{"title":"YHZ ' s Blog","subtitle":"技术之路，在于热爱与积累","description":null,"author":"Loya","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2016-11-02T15:49:09.000Z","updated":"2016-11-02T15:53:26.171Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"我是标签页"}],"posts":[{"title":"Node.js自学（一）","slug":"nodeJS-1","date":"2015-09-10T02:04:52.000Z","updated":"2016-11-04T12:16:11.999Z","comments":true,"path":"2015/09/10/nodeJS-1/","link":"","permalink":"http://yoursite.com/2015/09/10/nodeJS-1/","excerpt":"","text":"node 让前端可以有机会踏入后端开发领域，使用 JavaScript 语言进行服务器编程 划时代意义的 Node ，开启了前端工程师的 全栈开发 之旅 Node 介绍什么是 NodeNode官方网站 进入到官网可看到这么一段话： 123Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.Node.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world. 第一句话的含义： NodeJS 是一个构建与 Chrome V8 JavaScript 解析引擎之上的一个运行时环境 其中的 Chrome V8 引擎是开源的，在所有浏览器的 JavaScript 解析引擎中是最快的 维基百科 - JavaScript引擎 第二句话的含义： event-driven：事件驱动 non-blocking I/O model：非阻塞IO模型 lightweight and efficient：轻量和高效 Node 本身提供了一些系统级别操作API 第三句话的含义： package ecosystem, npm：包管理系统 npm largest ecosystem of open source libraries in the world. 目前世界上最大的开源库生态系统 50W + 就好比 Sublime编辑器一样，本身只提供很简单的功能 大部分都需要依靠社区中的插件、包来开发咱们的应用程序 npm 两层含义： 第一 是用来托管基于Node开发的包 第二 是一个命令行工具，可以用来下载npm网站上托管的Node包 有了 npm，就会成为完全傻瓜式的开发 直接拿来解决你的问题就可以了，能让你更加专注于业务的处理 Node 能解析和执行 JavaScript（ECMAScript） 代码 Node 是一个平台， Node 例如文件操作 网络操作 免费开源 通俗地讲，Node 不是库、框架，也不是一门新的语言，而是一个解析器，可以用来解析和执行 JavaScript 代码。本身是免费开源的 这里所谓的 JavaScript 是 ECMAScript（指循环、分支控制语句等if、else、for、var、function、Array、Object） Node 是一个平台，或者说是一个执行环境，自身通过 C、C++ 语言实现的，然后给上层 JavaScript 暴露接口访问 API，让 JavaScript 可以脱离浏览器环境运行 例如：文件操作、网络操作等，使用 Node 可以轻松的进行文件系统访问、HTTP 服务器开发等功能 具体的环境 API 是通过 C、C++ 代码实现的， 客户端和服务器任何后台编程平台，只要是 Web 服务器，都做这三步操作来处理数据 接收请求 处理请求 发送响应 为什么要学习Node Node 打破了过去 JavaScript 只能在浏览器中运行的局面 好处： 前后端编程环境统一，大大降低了前后端语言切换的代价 不好的地方在于，没有后台编程经验，特别容易分不清前后台代码，因为都是 js 使用 Node 可以做什么 高性能的网站服务器 实时多人游戏后台服务器 简单易用的命名行应用程序 gulp、less、bower、fis、http-server、npm ant、ruby、.net nuget 高大上的桌面应用程序 使用 Web 技术 作为解决方案 HTML、CSS、JavaScript 本质上就是将这些东西打包到一个浏览器中 electron Linus + Mac + Windows 底层的物联网开发 树莓派 移动开发 基于 HTML、CSS、JavaScript、Node Ionic 安卓 IOS 使用 Web 技术作为解决方案 Node 的特点 Single Thread：单线程 event-driven：事件驱动 non-blocking I/O model：非阻塞IO模型 同步阻塞型 IO，造成后续代码等待 异步非阻塞，相当于找了一个人帮你去干活儿，自己继续忙活自己的事情，即callback 一般通常的异步调用API往往伴随着一个回调函数来接收返回值 文件IO、网络IO 基本上都是异步的 lightweight and efficient: 轻量和高效（因为 Node 采用的是 事件驱动和非阻塞IO模型） 开源免费、跨平台 Node 的诞生历程 Node 的作者：Ryan Dahl 2004年还在纽约读数学系博士 2006年退学（世界那么大，我想去看看），生活所迫，选择了码农 接项目、工作、旅行，两年之后，成为了高性能Web服务器的专家 2009年5月，Ryan Dahl 在 github 上发布了最初的 Node 版本 最初的Node，名字叫：web.js，作者是希望把它做成一个类似于 Apache 一样的产品 2010年底，Ryan Dahl 加入 Joyent 公司全职负责 Node 的发展 2011年7月，Node 在微软的支持下发布了 Windows 版 2012年1月底，Ryan Dahl 将掌门人身份转交给了 Isaac Z.Schlueter，自己转向一些研究项目 2014年12月，多为重量级Node开发者不满 Joyent 对 Node 的管理，自立门户创建了 io.js 2015年9月，Node 与 io.js 合并，Node 的版本从 0.12.7 直接升级到了 4.0.0 合并后的 io.js 和 Node 在 Joyent 公司的维护下并行了两个版本： 一个是4.x.x 还是原来的 Node，这个版本是稳定版 一个是5.x.x，目前已经更新到了 7.0.0，其实就是 io.js，最新特性版，不建议生产环境使用 Node 在 2016 年 10月底正式发布 Node 7.0 7.0 已经最大限度的支持了很多的 ES6 新语法 而且提高了整体的执行性能，提供了一些新功能 API Node 学习资源推荐 官方文档 深入浅出Node.js Node.js实战（第一季） 实例 Node.js实战（第二季） 实例 Node与Express开发 菜鸟教程 - Node.js 七天学会NodeJS Node中文社区 Node V4.2.1中文文档 Node.js 包教不包会 安装与配置 Node 开发环境普通方式安装 下载地址：https://nodejs.org/en/download/ 下一步下一步即可 使用 nvm 安装和管理多个 node 环境版本 nvm node version management nvm 是一个命令行程序，可以非常方便的安装和管理多个 Node 版本 使用该命令，即可在多个node版本之间切换 1$ nvm use x.x.x 下载地址：https://github.com/coreybutler/nvm-windows 如何验证是否有Node环境打开终端，输入 node -v： 1$ node -v 如果能看到输出一个版本号，例如 v6.9.1 的文本，说明当前计算机有 Node环境。 快速体验Hello World使用 node 命令执行一个 JavaScript 脚本文件： 打开任意终端 使用 cd 命令切换到要执行的 js 脚本文件所属的目录 使用 node 文件名 去执行对应的 js 脚本文件 node 会解析和执行该文件中的代码，然后将执行结果输出到终端 当你在终端中输入 node example.js，实际上就是使用安装目录中的 node.exe 可执行程序，node.exe 程序会自动读取该文件中的内容，读取到该文件内容之后，node 环境开始解析和执行，如果有 console.log 这样的代码，node 会将该输出打印到控制台中。 注意1：文件名不要使用 node 命名 注意2：文件名和路径最好不要使用中文，路径中也最好不要有空格 用户名、目录名不要有中文，不要有空格，不要有特殊的字符 注意3：脚本文件编码都使用 utf8 文件IO：读写文件 文件操作，需要加载 fs 核心模块（Node 提供的模块） 读文件 readFile 123456789101112131415161718192021222324//加载 fs 核心模块var fs = require('fs')// 读文件// 文件操作，要么是相对路径，要么是绝对路径，两种方式都必须是以 . 开头的fs.readFile('./README.md', 'utf8', function (err, data) &#123; // 默认读取到的数据都是二进制数据， // 可以使用 toString 方法将二进制数据转为可以识别的字符 // console.log(data.toString()) // 或者也可以在 readFile 的第二个可选参数中，指定一个编码 // 如果读取文件成功，err 就是 null // 如果读取文件失败，err 就是一个错误对象 // console.log(err) if (err) &#123; // 自定义错误信息 // return console.log('读取文件失败了') // 开发阶段多使用 throw，可以方便快速排查错误 throw err &#125; console.log(data)&#125;) 写文件 writeFile 123456789101112var fs = require('fs')// 第一个参数指定一个文件路径// 如果该路径不存在，则新建// 如果已存在，则覆盖// 第二个参数指定要写入文件的内容，默认编码就是 utf8fs.writeFile('./data.txt', '这里指定要写入文件的内容', function (err) &#123; if (err) &#123; throw err &#125; console.log('wirte file success')&#125;) 网络IO：HTTP服务器 开启http服务器的步骤 创建一个 HTTP 服务器，得到一个 Server 实例对象 监听 Server 对象的 request 请求事件，设置相应的事件回调处理函数 调用 Server 对象的 listen 方法，绑定一个端口号，开启服务器 举个栗子 1234567891011121314151617181920212223// 加载用来构建 HTTP 服务器的核心模块var http = require('http')// 1. 创建一个 HTTP 服务器，得到一个 Server 实例对象var server = http.createServer()// 2. 监听 Server 对象的 request 请求事件，设置相应的事件回调处理函数// 请求处理函数需要接收两个参数，分别是 Request 请求对象 和 Response 响应对象// Request 请求对象：可以用来获取当前请求的一些信息，例如请求路径、请求方法、请求报文数据等// Response 响应对象：可以用来给当前请求发送响应server.on('request', function (request, response) &#123; // write 方法可以多次写入响应数据 response.write('hello world') // 写入响应数据之后，一定要记得 结束响应 // 否则，客户端会认为你的数据没有发送完毕，还要等待接收 // 可以使用 response.end 方法手动结束响应，本次请求响应结束 response.end()&#125;)// 3. 调用 Server 对象的 listen 方法，绑定一个端口号，开启服务器server.listen(3000, function () &#123; console.log('server is running at port 3000.')&#125;) 在本地浏览器 输入 http://127.0.0.1:3000/ 即可访问 解决中文乱码的问题 在第二步的回调函数中,通过在响应头中加入 Content-Type 字段来告诉客户端本次响应的数据类型和编码类型 1234567// response.writeHead 需要接收三个参数// 1. 响应状态码// 2. 响应状态短语，可选参数// 3. 响应头字段，是一个对象，键值对的形式表示response.writeHead(200, &#123; 'Content-Type': 'text/plain; charset=utf-8'&#125;) 通过请求对象拿到当前请求的一些数据（地址栏 url ） 解析 url 中的字符串内容，根据请求内容决定返回的数据 例子： 先创建一个文件夹，例如 http 新建三个 html 文件, index.html login.html about.html 模拟返回的数据 新建 app.js 用做 http 请求 这里只写index.html 文件，其他两个文件与之类似，可写不同的内容，相互区分 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;index page&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334353637383940var http = require('http')var fs = require('fs')var server = http.createServer()server.on('request', function (request, response) &#123; // 可以通过请求对象拿到当前请求的一些数据，例如请求路径、方法等信息 var url = request.url //默认取到的是 / if (url === '/') &#123; //这里无论是什么文件，也不管后缀名，读到的文件内容都是字符串，因此返回到页面上的都是解析出来的字符串内容 //比如把index.html文件改为 index 不加后缀名或改为a.txt //返回到页面中的都是 index page fs.readFile('./index.html', 'utf8', function (err, data) &#123; if (err) &#123; throw err &#125; response.end(data) &#125;) &#125; else if (url === '/login') &#123; fs.readFile('./login.html', 'utf8', function (err, data) &#123; if (err) &#123; throw err &#125; response.end(data) &#125;) &#125; else if (url === '/about') &#123; fs.readFile('./about.html', 'utf8', function (err, data) &#123; if (err) &#123; throw err &#125; response.end(data) &#125;) &#125; else &#123; response.end('&lt;h1&gt;404 Not Found.&lt;/h1&gt;') &#125;&#125;)server.listen(9090, function () &#123; console.log('server is running at port 3000...')&#125;) 地址栏什么都不输入时，页面输出 index page 地址栏输入 /login ,页面输出 login page (自己定义的内容) 若输入其他的 如： aasa ,页面返回 404 Not Found. Path 环境变量当在终端中要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统首先在当前目录下面寻找该程序，如果找不到，则系统会跑到path环境变量中指定的路径去找，如果找到，直接运行，如果path环境变量中也没有找到，则直接提示不是内部或外部命令，也不是可运行的程序。 添加 path 环境变量的两种方式： 一：直接在path环境变量中加入程序所属目录的绝对路径， 两边以 英文分号 进行分隔。 例如 XX.exe 程序的绝对路径是 C:\\Program Files\\XX，则在 path 中添加 ;C:\\Program Files\\XX; 二：也可以在外部先定义一个变量名，值就是程序所属目录的绝对路径， 然后在 path 中以 %变量名% 的方式引入，两边以分号分隔 例如 qq.exe 程序的绝对路径是 C:\\Program Files (x86)\\Tencent\\QQ\\Bin，则先定义一个变量名 QQ_HOME ，变量值就是 C:\\Program Files (x86)\\Tencent\\QQ\\Bin，然后在 path 中填入变量名：;%QQ_HOME%; npmhexobrowser-sync 当你使用 npm 安装一些第三方命令行工具的时候（凡是通过npm安装的第三方工具都是基于Node平台开发的），实际上就是把这个第三方工具包下载到了 全局包安装目录中了（可以通过 npm root -g 进行查看）。 它会自动在全局包安装目录的上一级目录生成一个 cmd 文件，这是Windows平台可以识别的DOS 脚本文件。 Node 基础Node 中的 JavaScript REPL运行环境 R：read E：Eval P：Print L：Loop ECMAScript Node 对最新的 ECMAScript 语言标准支持的非常好 对最新的 ES6 支持了将近 96% 的语法 Node 除了官方的 ECMAScript 语言规范 同时将 console 对象、定时器等函数也移植到 Node 中 全局对象 global 相对于浏览器中的的全局对象 window 全局作用域和模块作用域的概念 Console log info warn error process 进程对象 Buffer 全局函数 setInterval 和 clearInterval setTimeout 和 clearTimeout setImmediate 和 clearImmediate 模块内成员 dirname 和 filename require exports module Node 中的模块系统 Node 根据 CommonJS 规范实现了自己的一套模块系统 一个单独的文件就是一个模块 如何定义模块： Node 天生就已经实现了一个模块系统解决方案 默认在Node中运行的 JavaScript 脚本文件，就是一个模块，而且是私有作用域 每一个模块都是一个单独的作用域 没有浏览器中 window 全局作用域的概念了 每个文件对外接口是 module.exports 对象 require 方法用于加载模块 执行被加载模块中的 JavaScript 代码 得到模块的 module.exports 接口对象 核心模块和文件模块 以下是常用的核心模块： 模块名称 作用 fs 文件操作 http http服务 net Socket网络编程 os 操作系统相关 path 路径操作 querystring 处理查询字符串 url 处理url路径 util 工具函数","categories":[],"tags":[],"keywords":[]},{"title":"CSS3学习总结","slug":"CSS3学习总结","date":"2014-09-01T12:04:52.000Z","updated":"2016-11-01T12:59:26.321Z","comments":true,"path":"2014/09/01/CSS3学习总结/","link":"","permalink":"http://yoursite.com/2014/09/01/CSS3学习总结/","excerpt":"","text":"CSS3简介CSS3的现状基础知识","categories":[],"tags":[],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2014-03-06T00:08:16.000Z","updated":"2016-11-04T12:13:04.232Z","comments":true,"path":"2014/03/06/hello-world/","link":"","permalink":"http://yoursite.com/2014/03/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post.Check documentation for more info.If you get any problems when using Hexo,you can find the answer in troubleshootingor you can ask me on GitHub. 快速开始Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}